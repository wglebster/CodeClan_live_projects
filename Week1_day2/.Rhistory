library(beepr)
help(package = "beepr")
library(beepr)
help(package = "beepr")
beep()
library(beepr)
help(package = "beepr")
beep()
?beep
library(beepr)
help(package = "beepr")
beep(sound = 3)
library(beepr)
help(package = "beepr")
beep(sound = 9)
library(beepr)
help(package = "beepr")
beep(sound = 3)
install.packages("devtools")
devtools::install_github("codeclan/CodeClanData")
c(1, 4, 6, 3)
numbers <- c(1, 4, 6, 3)
numbers
more_numbers <- c(1,1,6,2,3,3,2,6)
more_numbers <- c(1,1,6,2,3,3,2,6)
many_numbers <- c(numbers, more_numbers)
many_numbers
primes <- c(2,3,5,7,11)
primes <- c(2,3,5,7,11)
primes <- c(2,3,5,7,11,13,17)
primes <- c(2,3,5,7,11)
primes <- c(primes,13,17)
primes <- c(2,3,5,7,11)
primes <- c(numbers,13,17)
primes <- c(2,3,5,7,11)
primes <- c(primes,13,17)
class(numbers)
class(c(1L, 5L, 6L)) #letter L specifies each element as Integer
class(c("a", "a", "b", "a")) #character data
as.factor(c("a", "a", "b", "a")) #saves as factor, factors are ordered
class(as.factor(c("a", "a", "b", "a")))
letters <- factor(c("a", "a", "b", "a"), ordered = TRUE)
letters[3] > letters[2]
class(c(TRUE, FALSE, FALSE, TRUE))
class(letters)
class(LETTERS)
LETTERS
tolower(LETTERS)
numbers
numbers + 5
c(1, 2) + 3
#is the same as
c(1, 2) + c(3, 3)
as.character(numbers)
as.character(numbers)
as.numeric(c("1", "2"))
as.character(numbers)
as.numeric(c("1", "2"))
as.logical(c(0, 1, -10))
numbers
sum(numbers)
mean(numbers)
length(numbers)
rev(numbers) #reverse order
many_numbers
unique(many_numbers)
many_numbers
unique(many_numbers) # returns only unique elements of the verctor
table(many_numbers) # tells how many times each element appears in a verctor
many_numbers
unique(many_numbers) # returns only unique elements of the verctor
table(many_numbers) # tells how many times each element appears in a verctor
sort(many_numbers)
many_numbers
unique(many_numbers) # returns only unique elements of the verctor
table(many_numbers) # tells how many times each element appears in a verctor
sort(many_numbers) # arranges elements in order, for characters it is alphabetical order
rev(sort(LETTERS))
1:5
seq(0, 50, by = 2)
rep(c(1, 2, 3), times = 4)
rep(c(1, 2, 3), times = 4) #repeats a vector specified number of times
rep(c(1, 2, 3), each = 4) #repeats each element
answer_1 <- seq(10, 100, by = 5)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
c(answer_1, answer_2, answer_3)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
sort(as.logical(vec))
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
sort(as.logical(vec))
rev(sum(answer_1)) = sum(answer_1)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
sort(as.logical(vec))
(sum(rev(answer_1))) = sum(answer_1)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
sort(as.logical(vec))
sum(rev(answer_1)) = sum(answer_1)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
sort(as.logical(vec))
sum(answer_1) = sum(answer_1)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
sort(as.logical(vec))
sum(answer_1) == sum(answer_1)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
sort(as.logical(vec))
sum(rev(answer_1)) == sum(answer_1)
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
sort(as.logical(vec))
sum(rev(answer_1)) == sum(answer_1)
table(unique(answer_3))
answer_1 <- seq(10, 100, by = 5)
answer_2 <- rep(8, times = 6)
answer_3 <- rep(c(2, 3, 4), each = 3)
vec <- c(answer_1, answer_2, answer_3)
sort(as.logical(vec))
sum(rev(answer_1)) == sum(answer_1)
table(unique(answer_3))
sum(as.logical(vec))
sum(as.logical(vec))
3Ë†2
3^2
3^2
5^5
5 + 5
3^2
6 - 1
2 * 5
10 / 2
5 + 5
3^2
6 - 1
2 * 5
10 / 2
10 / 2 * 10
5 + 5
3^2
6 - 1
2 * 5
10 / 2
10 / (2 * 10)
#integer division
10 %% 3
5 + 5
3^2
6 - 1
2 * 5
10 / 2
#integer division
10 %% 3
5 + 5
3^2
6 - 1
2 * 5
10 / 2
#integer division
10 %% 3
10 % 3
5 + 5
3^2
6 - 1
2 * 5
10 / 2
#integer division
10 %% 3
#operators work on vectors
1:20 %% 5
5 + 5
3^2
6 - 1
2 * 5
10 / 2
#integer division
10 %% 3
#operators work on vectors
1:20 + 5
6 == 6
6 == 6
c(6, 5, 6, 7) == 6
6 != 6
c(6, 5, 6, 7) < 6
c(6, 5, 6, 7) < 6
c(6, 5, 6, 7) <= 6
c(6, 5, 6, 7) < 6
c(6, 5, 6, 7) <= 6
c(6, 5, 6, 7) >= 6
5 %in% 1:6
!c(TRUE, FALSE, TRUE)
TRUE & TRUE
TRUE & TRUE
FALSE & FALSE
TRUE & TRUE
FALSE & FALSE
TRUE | FALSE
TRUE & TRUE
FALSE & FALSE
TRUE | FALSE
FALSE | FALSE
names(numbers) <- c("first", "second", "third", "fourth")
names(numbers) <- c("first", "second", "third", "fourth")
numbers
names(numbers) <- c("first", "second", "third", "fourth")
numbers
numbers[1:3]
names(numbers) <- c("first", "second", "third", "fourth")
numbers
numbers[1:3]
numbers[-1:3]
names(numbers) <- c("first", "second", "third", "fourth")
numbers
numbers[1:3]
numbers[-1:-3]
numbers > 3
greater_than_three <- numbers > 3
greater_than_three <- numbers > 3
numbers[greater_than_three]
answer_1[3]
answer_1[3]
answer_1[-length(answer_1)]
answer_1[3]
answer_1
answer_1[-length(answer_1)]
answer_1[3]
answer_1[-length(answer_1)]
answer_1[answer_1 < 25]
student <- c("Abigail", "Bjorn", "Caitlin", "Dave", "Elly", "Francis")
question_1 <- c(10, 3, 1, 5, 5, 8)
question_2 <- c(2, 5, 5, 4, 5, 6)
question_3 <- c(4, 5, 9, 7, 6, 8)
data.frame(student, question_1, question_2, question_3)
exam <- data.frame(student, question_1, question_2, question_3)
exam_results <- data.frame(student, question_1, question_2, question_3)
exam_results <- data.frame(student, question_1, question_2, question_3)
rm(exam)
View(exam_results)
exam_results$question_1
#add a column
exam_results$question_4 <- c(6L, 3L, 10L, 3L, 9L, 7L)
#add a column
exam_results$question_4 <- c(6L, 3L, 10L, 3L, 9L, 7L)
exam_results
#add a column
exam_results$question_4 <- c(6L, 3L, 10L, 3L, 9L, 7L)
exam_results
#to wipe question_4
exam_results$question_4 <- NULL
#add a column
exam_results$question_4 <- c(6L, 3L, 10L, 3L, 9L, 7L)
exam_results
#to wipe question_4
exam_results$question_4 <- NULL
exam_results
exam_results$total <- exam_results$question_1 + exam_results$question_2 + exam_results$question_3
exam_results
str(exam_results)
View(exam_results)
View(exam_results)
View(exam_results)
nrow(exam_results)
nrow(exam_results)
ncol(exam_results)
nrow(exam_results)
ncol(exam_results)
#for both ncol & nrow
dim(exam_results)
exam_results[1, ]
exam_results[1, ]#selects first row, all columns
exam_results[ , 1]
exam_results[1, ]#selects first row, all columns
exam_results[ ,1]#selects values from the first column (in a flat way)
exam_results[1, ]#selects first row, all columns
exam_results[,1]#selects values from the first column (in a flat way)
exam_results[1, ]#selects first row, all columns
exam_results[,1]#selects values from the first column (in a flat way)
exam_results[1, 1]
exam_results[1, 1]
exam_results[1,1]
exam_results[3:5, ]
exam_results[3:5,2]
exam_results[3:5, ]
exam_results[c(1, 3, 5), ]
exam_results$student
exam_results$student
#same as
exam_results[ ,"student"]
exam_results$student
#same as
exam_results[ ,"student"]
#same as
exam_results[ ,1]
exam_results$student[1:3]
#same as
exam_results[ ,"student"]
#same as
exam_results[ ,1]
exam_results$student[1:3]
#same as
exam_results[ ,"student"]
#same as
exam_results[ ,1]
exam_results$student
#same as
exam_results[ ,"student"]
#same as
exam_results[ ,1]
exam_results[ ,c("student", "question_1")]
exam_results[3 ,c("student", "question_1")]
exam_results[2 ,c("student", "question_1")]
exam_results[ ,c("student", "question_1")]
subset(exam_results, question_2 == 5)
colnames(exam_results)
colnames(exam_results)
rownames(exam_results)
rownames(exam_results) <- c("student_1", "student_2", "student_3", "student_4", "student_5", "student_6")
exam_results
results_order <- order(exam_results$total)
results_order
exam_results$total
exam_results[results_order, ]
age <- c(25, 56, 40)
gender <- c("female", "female", "male")
shoe_size <- c(7, 5, 13)
is_satisfied <- c(TRUE, TRUE, FALSE)
shoe_satisfaction <- data.frame(age, gender, shoe_size, is_satisfied)
shoe_satisfaction
shoe_satisfaction[1, ]
shoe_satisfaction[ ,3]
subset(shoe_satisfaction, is_satisfied == TRUE)
age_order <- order(shoe_satisfaction$age)
shoe_satisfaction[age_order, ]
x <- list(1, "a", TRUE, c(1, 2, 3))
x
x <- list(1, "a", TRUE, c(1, 2, 3))
x
x[[2]]
x[2]
named_list <- list(a = "I love R", b = 1:10)
named_list
named_list$a
named_list$a
names(named_list)
student_info <- list(
"Agnes" = list(height = 1.8, shoe_size = 8L),
"Bobby" = list(height = 2.1, gender = "Male"),
"Charlie" = list(gender = "Female", likes_beets = TRUE)
)
student_info
student_info$Agnes$height
student_info$Agnes$height
student_info[[1]][[1]]
student_info$Agnes$height
#same as
student_info[[1]][[1]]
named_list1 <- list(1:3, c("one", "two", "three"))
View(named_list1)
named_list1 <- list(1:3, c("one", "two", "three"))
named_list1
class(named_list1[[2]])
class(named_list1[[2]])
class(named_list1[2])
named_list1 <- list(numbers = 1:3,  words = c("one", "two", "three"))
named_list1 <- list(numbers = 1:3,  words = c("one", "two", "three"))
named_list1 <- list(numbers = 1:3,  words = c("one", "two", "three"))
named_list1
class(named_list1[[2]])
class(named_list1[2])
class(named_list1[[2]])
class(named_list1[2])
class(named_list1[[2]])
class(named_list1[2])
class(named_list1$words)
my_matrix(rep(1:3,)nrow = 3, ncol = 4, byrow = TRUE)
?rep
my_matrix(rep(1:3, 4)nrow = 3, ncol = 4, byrow = TRUE)
my_matrix(rep(1:3, 4), nrow = 3, ncol = 4, byrow = TRUE)
my_matrix(rep(1:3), nrow = 3, ncol = 4, byrow = TRUE)
my_matrix(rep(1:3))
my_matrix <- (rep(1:3))
my_matrix <- (rep(1:3))
my_matrix
my_matrix <- (rep(1:3), nrow = 3, ncol = 4, byrow = TRUE))
my_matrix <- (rep(1:3), nrow = 3, ncol = 4, byrow = TRUE)
my_matrix <- (rep(1:3,4), nrow = 3, ncol = 4, byrow = TRUE)
my_matrix <- (rep(1:3,4))
my_matrix
my_matrix <- (rep(1:3,4), nrow = 3)
my_matrix <- (rep(1:3,4) nrow = 3)
my_matrix <- (rep(1:3,4) nrow = 3 ncol = 4)
my_matrix <- (rep(1:3,4), nrow = 3, ncol = 4)
my_matrix <- matrix(rep(1:3,4), nrow = 3, ncol = 4)
my_matrix
dim(my_matrix)
dim(my_matrix)
sum(my_matrix)
dim(my_matrix)
colSums(my_matrix)
dim(my_matrix)
colSums(my_matrix)
rowSums(my_matrix)
dim(my_matrix)
colSums(my_matrix)
rowSums(my_matrix)
rownames(my_matrix) <- c("one", "two", "three")
dim(my_matrix)
colSums(my_matrix)
rowSums(my_matrix)
rownames(my_matrix) <- c("one", "two", "three")
my_matrix
another_matrix <- data.frame(
c1 = c(1, 2 , 3),
c2 = c("A", "B", "C"),
#stringsAsFactors = FALSE
)
another_matrix <- data.frame(
c1 = c(1, 2 , 3),
c2 = c("A", "B", "C"),
stringsAsFactors = FALSE
)
another_matrix <- data.frame(
c1 = c(1, 2 , 3),
c2 = c("A", "B", "C"),
stringsAsFactors = FALSE
)
another_matrix
another_matrix <- data.frame(
c1 = c(1, 2 , 3),
c2 = c("A", "B", "C"),
stringsAsFactors = TRUE
)
another_matrix
class(another_matrix$c1)
class(another_matrix$c1)
class(another_matrix$c2)
another_matrix <- data.frame(
c1 = c(1, 2 , 3),
c2 = c("A", "B", "C"),
stringsAsFactors = FALSE
)
another_matrix
class(another_matrix$c1)
class(another_matrix$c2)
another_matrix <- data.frame(
c1 = c(1, 2 , 3),
c2 = c("A", "B", "C"),
stringsAsFactors = TRUE
)
another_matrix
class(another_matrix$c1)
class(another_matrix$c2)
another_matrix <- data.frame(
c1 = c(1, 2 , 3),
c2 = c("A", "B", "C"),
stringsAsFactors = FALSE
)
another_matrix
class(another_matrix$c1)
class(another_matrix$c2)
dataframe_example <- data.frame(
c1 = 1:5,
c2 = letters[6:10],
c3 = 11:15
)
dataframe_example <- data.frame(
c1 = 1:5,
c2 = letters[6:10],
c3 = 11:15
)
dataframe_example
dataframe_example <- data.frame(
c1 = 1:5,
c2 = LETTERS[6:10],
c3 = 11:15
)
dataframe_example
as.matrix(dataframe_example)
data.matrix(dataframe_example)
class(as.matrix(dataframe_example))
class(data.matrix(dataframe_example))
