---
title: "SQL JOINS LAB"
output: html_notebook
---

```{r}
library(RPostgreSQL)
```
Create root path and connect to credentials
```{r}
credentials_location <- paste0(Sys.getenv("HOME"),"/credentials.R")
source(credentials_location)
```
Create DB connection
```{r}
db_conect <- dbConnect(drv = PostgreSQL(), user = postgresql_username, password = postgresql_password, dbname = "omni_employees", host = "localhost")
#rm(postgresql_username, postgresql_password, remote_omni_postgresql_password, remote_omni_postgresql_username)
```
Check if connetion was successful and list all tables
```{r}
dbListTables(conn = db_conect)
```

```{r}
dbListFields(conn = db_conect, name = "committees")
```

Show the average salary in any countries in which more than 30 employees are based. Order the list descending by average salary. - ASK ABOUT IT IN REVIEW.
```{sql connection=db_conect}
SELECT
  country,
  AVG(salary) AS avg_salary
FROM employees
GROUP BY country
HAVING COUNT(country) > 30
ORDER BY avg_salary DESC
```

Find the first name and last name of all employees who lack a local_tax_code.
```{sql connection=db_conect}
SELECT 
  first_name,
  last_name,
  pay_details.local_tax_code
FROM employees INNER JOIN pay_details
ON employees.pay_detail_id = pay_details.id
WHERE pay_details.local_tax_code IS NULL
```

Find the first name, last name and team name of employees who are members of teams for which the charge cost is greater than 80. Order the employees alphabetically by last name.
```{sql connection=db_conect}
SELECT
  employees.first_name,
  employees.last_name,
  teams.name,
  teams.charge_cost
FROM employees INNER JOIN teams 
ON employees.team_id = teams.id
WHERE CAST(teams.charge_cost AS INT) > 80
ORDER BY UPPER(employees.last_name) ASC NULLS LAST
```

Breakdown the number of employees in each of the teams, including any teams without members. Order the list by increasing size of team. - CHECK IF THIS IS CORRECT, BECAUSE I COUNTED EMPLOYEE IDS, so potentially would've omitted any NULL values.
```{sql connection=db_conect}
SELECT 
  teams.name,
  COUNT(employees.id) AS num_employees
FROM employees FULL OUTER JOIN teams
ON employees.team_id = teams.id
GROUP BY teams.name 
ORDER BY num_employees ASC NULLS FIRST
```

Do a count by year of the start dates of all employees, ordered most recent year last.
[Investigate how to use the SQL EXTRACT() function to get the year from a date]
```{sql connection=db_conect}
SELECT 
  EXTRACT(YEAR FROM start_date) AS start_year,
  COUNT(EXTRACT(YEAR FROM start_date)) AS num_starts
FROM employees
--WHERE start_date IS NOT NULL
GROUP BY start_year
ORDER BY start_year DESC NULLS LAST
```

Return the first name, last name and salary of all employees together with a new column called salary_class with value 'low' where salary is less than 40,000 and value 'high' where salary is greater than or equal to 40,000. Think carefully how to deal with NULL salaries.
[Investigate how to use the SQL CASE() function to return the required values 'low' and 'high' based on the value of salary]
```{sql connection=db_conect}
SELECT
  first_name,
  last_name,
  salary,
    CASE
        WHEN salary < 40000 THEN 'Low'
        WHEN salary >= 40000 THEN 'High'
        ELSE 'Salary record is missing'
    END AS salary_class
FROM employees
ORDER BY salary DESC NULLS LAST
```

Only return first names where more than 1 person has the first name.
```{sql connection=db_conect}
SELECT 
  first_name,
  COUNT(first_name) AS fname_count
FROM employees
GROUP BY first_name
HAVING COUNT(first_name) > 1
ORDER BY fname_count DESC
```
How many of the corporationâ€™s employees serve in committees
```{sql connection=db_conect}
SELECT
  COUNT(employee_id)
FROM employees_committees
```
Get the full details (including committee name) of any committee members based in China.

```{sql connection=db_conect}
SELECT 
  employees.*, committees.name AS committee_name
FROM employees 
INNER JOIN employees_committees
  ON employees.id = employees_committees.employee_id
INNER JOIN committees
  ON employees_committees.committee_id = committees.id
WHERE employees.country = 'China'
```

EXPLANATION: 

The first FROM statement selects the first table and joins on the second one. 
Example FROM table_1 JOIN table_2 ON table_1_column = table_2_column
Each following FROM statement joins only one more table to the existing selection. JOIN table_3 ON table_2_column = table_3_column


```{sql connection=db_conect}
SELECT *
FROM employees_committees
```

```{r}
dbDisconnect(db_conect)
```


